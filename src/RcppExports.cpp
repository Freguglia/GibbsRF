// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// RandomMatrixCpp
NumericMatrix RandomMatrixCpp(IntegerVector dim, int max_value);
RcppExport SEXP _GibbsRF_RandomMatrixCpp(SEXP dimSEXP, SEXP max_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type max_value(max_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(RandomMatrixCpp(dim, max_value));
    return rcpp_result_gen;
END_RCPP
}
// ConditionalProbs
NumericVector ConditionalProbs(NumericMatrix X, IntegerVector position, int C, NumericMatrix cMat, NumericMatrix vMat, NumericVector V);
RcppExport SEXP _GibbsRF_ConditionalProbs(SEXP XSEXP, SEXP positionSEXP, SEXP CSEXP, SEXP cMatSEXP, SEXP vMatSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type position(positionSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(ConditionalProbs(X, position, C, cMat, vMat, V));
    return rcpp_result_gen;
END_RCPP
}
// multiple_times_old
NumericMatrix multiple_times_old(NumericMatrix X, NumericMatrix cMat, NumericMatrix vMat, NumericVector V, int C, int n_times);
RcppExport SEXP _GibbsRF_multiple_times_old(SEXP XSEXP, SEXP cMatSEXP, SEXP vMatSEXP, SEXP VSEXP, SEXP CSEXP, SEXP n_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type n_times(n_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(multiple_times_old(X, cMat, vMat, V, C, n_times));
    return rcpp_result_gen;
END_RCPP
}
// rGRF
NumericMatrix rGRF(NumericMatrix cMat, NumericMatrix vMat, NumericVector V, int max_value, int macrosteps, NumericMatrix initial);
RcppExport SEXP _GibbsRF_rGRF(SEXP cMatSEXP, SEXP vMatSEXP, SEXP VSEXP, SEXP max_valueSEXP, SEXP macrostepsSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type max_value(max_valueSEXP);
    Rcpp::traits::input_parameter< int >::type macrosteps(macrostepsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(rGRF(cMat, vMat, V, max_value, macrosteps, initial));
    return rcpp_result_gen;
END_RCPP
}
// log_plik
double log_plik(NumericMatrix X, NumericMatrix cMat, NumericMatrix vMat, NumericVector V, int max_value);
RcppExport SEXP _GibbsRF_log_plik(SEXP XSEXP, SEXP cMatSEXP, SEXP vMatSEXP, SEXP VSEXP, SEXP max_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type max_value(max_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(log_plik(X, cMat, vMat, V, max_value));
    return rcpp_result_gen;
END_RCPP
}
// DifHistogramcpp
NumericMatrix DifHistogramcpp(NumericMatrix X, NumericMatrix cMat, int G);
RcppExport SEXP _GibbsRF_DifHistogramcpp(SEXP XSEXP, SEXP cMatSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(DifHistogramcpp(X, cMat, G));
    return rcpp_result_gen;
END_RCPP
}
// MAPclassICM
NumericMatrix MAPclassICM(NumericMatrix Y, NumericMatrix cMat, NumericVector V, NumericMatrix vMat, int G, NumericVector mus, NumericVector sigmas, NumericMatrix X, int iter);
RcppExport SEXP _GibbsRF_MAPclassICM(SEXP YSEXP, SEXP cMatSEXP, SEXP VSEXP, SEXP vMatSEXP, SEXP GSEXP, SEXP musSEXP, SEXP sigmasSEXP, SEXP XSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MAPclassICM(Y, cMat, V, vMat, G, mus, sigmas, X, iter));
    return rcpp_result_gen;
END_RCPP
}
// HMEM_CondProb
NumericMatrix HMEM_CondProb(NumericMatrix Y, NumericMatrix X, NumericMatrix cMat, NumericMatrix vMat, NumericVector V, int G, double mu, double sigma, int candidate_value);
RcppExport SEXP _GibbsRF_HMEM_CondProb(SEXP YSEXP, SEXP XSEXP, SEXP cMatSEXP, SEXP vMatSEXP, SEXP VSEXP, SEXP GSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP candidate_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type candidate_value(candidate_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(HMEM_CondProb(Y, X, cMat, vMat, V, G, mu, sigma, candidate_value));
    return rcpp_result_gen;
END_RCPP
}
// Hidden_CondSample
NumericMatrix Hidden_CondSample(NumericMatrix Y, NumericMatrix X, NumericMatrix cMat, NumericMatrix vMat, NumericVector V, int G, NumericVector mu, NumericVector sigma);
RcppExport SEXP _GibbsRF_Hidden_CondSample(SEXP YSEXP, SEXP XSEXP, SEXP cMatSEXP, SEXP vMatSEXP, SEXP VSEXP, SEXP GSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cMat(cMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vMat(vMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Hidden_CondSample(Y, X, cMat, vMat, V, G, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GibbsRF_RandomMatrixCpp", (DL_FUNC) &_GibbsRF_RandomMatrixCpp, 2},
    {"_GibbsRF_ConditionalProbs", (DL_FUNC) &_GibbsRF_ConditionalProbs, 6},
    {"_GibbsRF_multiple_times_old", (DL_FUNC) &_GibbsRF_multiple_times_old, 6},
    {"_GibbsRF_rGRF", (DL_FUNC) &_GibbsRF_rGRF, 6},
    {"_GibbsRF_log_plik", (DL_FUNC) &_GibbsRF_log_plik, 5},
    {"_GibbsRF_DifHistogramcpp", (DL_FUNC) &_GibbsRF_DifHistogramcpp, 3},
    {"_GibbsRF_MAPclassICM", (DL_FUNC) &_GibbsRF_MAPclassICM, 9},
    {"_GibbsRF_HMEM_CondProb", (DL_FUNC) &_GibbsRF_HMEM_CondProb, 9},
    {"_GibbsRF_Hidden_CondSample", (DL_FUNC) &_GibbsRF_Hidden_CondSample, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_GibbsRF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
